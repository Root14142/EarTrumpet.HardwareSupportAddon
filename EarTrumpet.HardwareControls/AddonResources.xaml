<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:ctl="clr-namespace:EarTrumpet.UI.Controls;assembly=EarTrumpet"
                    xmlns:ie="http://schemas.microsoft.com/xaml/behaviors"
                    xmlns:resx="clr-namespace:EarTrumpet.HardwareControls.Properties"
                    xmlns:vm="clr-namespace:EarTrumpet.HardwareControls.ViewModels">

    <DataTemplate DataType="{x:Type vm:EarTrumpetHardwareControlsPageViewModel}">
        <StackPanel Orientation="Vertical" ScrollViewer.HorizontalScrollBarVisibility="Disabled" >
            <TextBlock Style="{StaticResource BodyText}" Text="{x:Static resx:Resources.HardwareControlInformation}" />
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Button Grid.Row="0"
                        Grid.Column="0"
                        Command="{Binding NewControlCommand}"
                        Content="{x:Static resx:Resources.AddNewText}" />
                <Button Grid.Row="1"
                        Grid.Column="1"
                        Command="{Binding DeleteSelectedControlCommand}"
                        Content="{x:Static resx:Resources.DeleteSelectedText}" />
                <Button Grid.Row="1"
                        Grid.Column="0"
                        Command="{Binding EditSelectedControlCommand}"
                        Content="{x:Static resx:Resources.EditSelectedText}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" ScrollViewer.HorizontalScrollBarVisibility="Disabled" />
                <Button Grid.Row="0"
                        Grid.Column="1"
                        Command="{Binding NewFromSelectedControlCommand}"
                        Content="{x:Static resx:Resources.AddNewFromSelectedText}" />
            </Grid>
            
            <ctl:ListView HorizontalContentAlignment="Stretch"
                          ItemsSource="{Binding HardwareControls}"
                          ScrollViewer.HorizontalScrollBarVisibility="Auto"
                          SelectedIndex="{Binding SelectedIndex}"
                          SelectionMode="Single" 
                          ScrollViewer.VerticalScrollBarVisibility="Auto"
                          Margin="0, 0, 20, 20" HorizontalAlignment="Stretch">

                <ctl:ListView.View>
                    <GridView>
                        <GridViewColumn Header="{x:Static resx:Resources.DeviceText}" DisplayMemberBinding="{Binding AudioDevice.Length}"/>
                        <GridViewColumn Header="{x:Static resx:Resources.CommandText}"      DisplayMemberBinding="{Binding Path=Command}"/>
                        <GridViewColumn Header="{x:Static resx:Resources.ModeText}"         DisplayMemberBinding="{Binding Path=Mode}"/>
                        <GridViewColumn Header="{x:Static resx:Resources.SelectionText}"    DisplayMemberBinding="{Binding Path=IndexApplicationSelect}"/>
                        <GridViewColumn Header="{x:Static resx:Resources.DeviceTypeText}"   DisplayMemberBinding="{Binding Path=DeviceType}"/>
                        <GridViewColumn Header="{x:Static resx:Resources.ControlText}"      DisplayMemberBinding="{Binding Path=HWConfig}"/>
                    </GridView>
                </ctl:ListView.View>
                
                <ie:Interaction.Triggers>
                    <ie:EventTrigger EventName="MouseDoubleClick">
                        <ie:InvokeCommandAction Command="{Binding EditSelectedControlCommand}" />
                    </ie:EventTrigger>
                </ie:Interaction.Triggers>
                <!--  here set the itemTemplate to a TextBlock that can wraps  -->
                <ListView.ItemTemplate>
                    <DataTemplate>
                        <TextBlock Text="{Binding Path=.}" TextWrapping="Wrap" />
                    </DataTemplate>
                </ListView.ItemTemplate>
            </ctl:ListView>

        </StackPanel>
    </DataTemplate>
    
    <DataTemplate DataType="{x:Type vm:OSDViewModel}">
        <StackPanel Orientation="Vertical">
            <!-- TODO replace by OSDInformation -->
            <TextBlock Style="{StaticResource BodyText}" Text="{x:Static resx:Resources.OSDInformation}"/>
            <Grid HorizontalAlignment="Stretch">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <CheckBox x:Name="enabled" Content="{x:Static resx:Resources.EnableOverlayText}" IsChecked="{Binding EnableOverlay, Mode=TwoWay}"></CheckBox>
                <GroupBox Grid.Row="1" x:Name="position" Header="{x:Static resx:Resources.PositionText}" HorizontalAlignment="Stretch">
                    <Grid Margin="0,0,0,0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="0.33*" />
                            <ColumnDefinition Width="0.33*" />
                            <ColumnDefinition Width="0.33*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="0.33*" />
                            <RowDefinition Height="0.33*" />
                            <RowDefinition Height="0.33*" />
                        </Grid.RowDefinitions>
                        
                        <RadioButton Grid.Row="0" Grid.Column="0" x:Name="topLeft" Content="" VerticalAlignment="Top" HorizontalAlignment="Left" IsChecked="{Binding TopLeft, Mode=TwoWay}"></RadioButton>
                        <RadioButton Grid.Row="0" Grid.Column="2" x:Name="topRight" Content="" VerticalAlignment="Top" HorizontalAlignment="Right" IsChecked="{Binding TopRight, Mode=TwoWay}"></RadioButton>
                        <RadioButton Grid.Row="1" Grid.Column="1" x:Name="center" Content="" VerticalAlignment="Center" HorizontalAlignment="Center" IsChecked="{Binding Center, Mode=TwoWay}"></RadioButton>
                        <RadioButton Grid.Row="2" Grid.Column="0" x:Name="bottomLeft" Content="" VerticalAlignment="Bottom" HorizontalAlignment="Left" IsChecked="{Binding BottomLeft, Mode=TwoWay}"></RadioButton>
                        <RadioButton Grid.Row="2" Grid.Column="2" x:Name="bottomRight" Content="" VerticalAlignment="Bottom" HorizontalAlignment="Right" IsChecked="{Binding BottomRight, Mode=TwoWay}"></RadioButton>
                    </Grid>
                </GroupBox>
                
                <Grid Grid.Row="2">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>

                    <Label Grid.Row="0" Grid.Column="0" Content="{x:Static resx:Resources.XOffsetText}" HorizontalAlignment="Right" VerticalAlignment="Center">
                        <Label.Foreground>
                            <SolidColorBrush Color="{DynamicResource {x:Static SystemColors.GrayTextColorKey}}"/>
                        </Label.Foreground>
                    </Label>
                    <TextBox Grid.Row="0" Grid.Column="1" Text="{Binding OffsetX, Mode=TwoWay}"></TextBox>

                    <Label Grid.Row="1" Grid.Column="0" Content="{x:Static resx:Resources.YOffsetText}" HorizontalAlignment="Right" VerticalAlignment="Center">
                        <Label.Foreground>
                            <SolidColorBrush Color="{DynamicResource {x:Static SystemColors.GrayTextColorKey}}"/>
                        </Label.Foreground>
                    </Label>
                    <TextBox Grid.Row="1" Grid.Column="1" Text="{Binding OffsetY, Mode=TwoWay}"></TextBox>

                    <Label Grid.Row="2" Grid.Column="0" Content="{x:Static resx:Resources.DisplayTimeText}" HorizontalAlignment="Right" VerticalAlignment="Center">
                        <Label.Foreground>
                            <SolidColorBrush Color="{DynamicResource {x:Static SystemColors.GrayTextColorKey}}"/>
                        </Label.Foreground>
                    </Label>
                    <TextBox Grid.Row="2" Grid.Column="1" Text="{Binding DisplayTime, Mode=TwoWay}"></TextBox>
                </Grid>
            </Grid>
        </StackPanel>
    </DataTemplate>
</ResourceDictionary>
